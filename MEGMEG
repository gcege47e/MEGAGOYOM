import telebot
import sqlite3
import os
import json
from flask import Flask, request
from telebot import types
import datetime
import jdatetime
from persian import convert_fa_numbers
import random

# تنظیمات اولیه
API_TOKEN = '8134200098:AAGGapErG9F0ek0lAEdrI53E5gzPDcObTQM'
ADMIN_ID = 7385601641
WEBHOOK_URL = os.getenv('WEBHOOK_URL', '') + f'/{API_TOKEN}' if os.getenv('WEBHOOK_URL') else None

bot = telebot.TeleBot(API_TOKEN)
app = Flask(__name__)

# ایجاد دایرکتوری داده
os.makedirs("data", exist_ok=True)
DB_PATH = "data/goyom_bot.db"

# اتصال به دیتابیس
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()

# ایجاد جداول
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    age INTEGER,
    gender TEXT,
    points INTEGER DEFAULT 0,
    random_id INTEGER UNIQUE,
    last_active DATE
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS ads(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    title TEXT,
    description TEXT,
    price TEXT,
    address TEXT,
    category_main TEXT,
    category_sub TEXT,
    photo_id TEXT,
    contact TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS shops(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    description TEXT,
    address TEXT,
    category_main TEXT,
    category_sub TEXT,
    photo_id TEXT,
    contact TEXT,
    admin_id INTEGER,
    owner_id INTEGER,
    seller_username TEXT,
    seller_age INTEGER,
    seller_gender TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS shop_ratings(
    shop_id INTEGER,
    user_id INTEGER,
    rating INTEGER,
    PRIMARY KEY (shop_id, user_id)
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS admin_content(
    section TEXT PRIMARY KEY,
    content TEXT
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS jokes(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    joke_text TEXT
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS user_states(
    user_id INTEGER PRIMARY KEY,
    state TEXT,
    data TEXT
)''')

conn.commit()

# دسته‌بندی‌های آگهی
AD_CATEGORIES = {
    "🏡 املاک و مستغلات 🏡": ["🏢 خرید و فروش آپارتمان", "🏠 خرید و فروش خانه و ویلا", "🛖 زمین و کلنگی", "📦 اجاره مسکونی"],
    "🚗 وسایل نقلیه 🚗": ["🚘 خرید و فروش خودرو", "🛵 موتور سیکلت", "🚌 خودروهای سنگین"],
    "🛒 لوازم شخصی و خانگی 🛒": ["🛏 وسایل خانه", "🍳 وسایل آشپزخانه", "🪑 مبلمان"],
    "👔 پوشاک و مد 👔": ["👗 پوشاک زنانه", "👔 پوشاک مردانه", "⌚ اکسسوری"],
    "🧸 اسباب‌بازی و کودک 🧸": ["🧸 اسباب بازی", "🍼 لوازم نوزاد", "🚼 وسایل کودک"],
    "🖥️ الکترونیک و موبایل 🖥️": ["📱 موبایل", "💻 لپ‌تاپ و کامپیوتر", "🎧 لوازم جانبی"],
    "🏋️‍♂️ ورزش و سرگرمی 🏋️‍♂️": ["🎮 بازی و کنسول", "⚽ وسایل ورزشی", "🎤 سازهای موسیقی"],
    "🛠️ ابزار و تجهیزات 🛠️": ["🛠️ ابزار فنی", "🔧 تجهیزات صنعتی", "⚡ لوازم برقی"],
    "🐾 حیوانات خانگی 🐾": ["🐶 سگ", "🐱 گربه", "🐠 حیوانات دیگر"],
    "🎓 خدمات آموزشی 🎓": ["📚 تدریس خصوصی", "🎨 کلاس‌های هنری", "💻 آموزش کامپیوتر"],
    "🎉 خدمات و استخدام 🎉": ["🧑‍💼 استخدام", "🛠️ خدمات فنی", "🍴 خدمات غذایی"],
    "✈️ گردشگری و سفر ✈️": ["🏨 رزرو هتل", "✈️ بلیط هواپیما", "🗺️ تورهای مسافرتی"],
    "🎁 هدایا و هنر 🎁": ["🎨 صنایع دستی", "💐 گل و هدیه", "🖼️ تابلوهای نقاشی"],
    "🍽️ رستوران و غذا 🍽️": ["🍕 فست فود", "🍰 قنادی", "🥗 غذای محلی"],
    "💼 کسب‌وکار و تبلیغات 💼": ["📊 مشاوره کسب‌وکار", "📢 تبلیغات", "🌐 طراحی سایت"]
}

# دسته‌بندی‌های مغازه
SHOP_CATEGORIES = {
    "🥖 مواد غذایی و سوپرمارکت‌ها 🥖": ["🛒 سوپرمارکت", "🥩 قصابی", "🍎 میوه‌فروشی"],
    "🧸 اسباب‌بازی و کودک 🧸": ["🧸 فروشگاه اسباب بازی", "👶 لوازم نوزاد", "🚼 لباس کودک"],
    "👕 پوشاک و لباس 👕": ["👗 پوشاک زنانه", "👔 پوشاک مردانه", "👕 پوشاک ورزشی"],
    "👟 کفش و کیف 👟": ["👞 کفش مردانه", "👠 کفش زنانه", "👜 کیف و چمدان"],
    "🖥️ الکترونیک و موبایل 🖥️": ["📱 فروشگاه موبایل", "💻 فروشگاه لپ‌تاپ", "🎧 لوازم جانبی الکترونik"],
    "🏠 لوازم خانگی و آشپزخانه 🏠": ["🍳 لوازم آشپزخانه", "🛏 لوازم خواب", "🧹 لوازم نظافتی"],
    "💄 آرایشی و بهداشتی 💄": ["💅 لوازم آرایشی", "🧴 محصولات بهداشتی", "🧼 عطر و ادکلن"],
    "📚 کتاب و نوشت‌افزار 📚": ["📖 کتابفروشی", "🖊️ فروشگاه نوشت افزار", "🎨 فروشگاه هنری"],
    "🛠️ ابزار و یراق آلات 🛠️": ["🔧 فروشگاه ابزار", "⚙️ یراق آلات", "🪛 ابزار برقی"],
    "🪴 گل و گیاه 🪴": ["💐 گل فروشی", "🌿 گیاهان آپارتمانی", "🏺 گلدان و لوازم باغبانی"],
    "🏋️‍♂️ باشگاه و لوازم ورزشی 🏋️‍♂️": ["🏋️‍♂️ فروشگاه ورزشی", "🚴 لوازم دوچرخه", "🎽 لباس ورزشی"],
    "🏍️ موتور و دوچرخه و لوازم جانبی 🏍️": ["🏍️ فروشگاه موتور", "🚲 فروشگاه دوچرخه", "🛡️ لوازم جانبی موتور"],
    "🚗 لوازم خودرو و تعمیرگاه‌ها 🚗": ["🔧 تعمیرگاه خودرو", "🚘 فروشگاه لوازم خودرو", "🛞 فروشگاه لاستیک"],
    "🏨 رستوران و کافی‌شاپ 🏨": ["🍕 رستوران", "☕ کافی شاپ", "🍰 قنادی"],
    "🎮 گیم و سرگرمی 🎮": ["🎮 فروشگاه بازی", "🎲 فروشگاه سرگرمی", "🎯 اسباب بازی فکری"]
}

# کیبوردهای اصلی
def get_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    items = [
        types.KeyboardButton("📢 اخبار گویم 📢"),
        types.KeyboardButton("🌦 تاریخ و ساعت 🌦"),
        types.KeyboardButton("🛍 دیوار گویم 🛍"),
        types.KeyboardButton("🎉 سرگرمی و مسابقه 🎉"),
        types.KeyboardButton("😂 طنز و خاطرات 😂"),
        types.KeyboardButton("⚽ ورزش و رویدادها ⚽"),
        types.KeyboardButton("🗳 نظرسنجی 🗳"),
        types.KeyboardButton("📞 خدمات و شماره‌های مهم 📞"),
        types.KeyboardButton("📝 پروفایل من 📝"),
        types.KeyboardButton("🏪 مغازه ها 🏪")
    ]
    keyboard.add(*items)
    return keyboard

def get_admin_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    items = [
        types.KeyboardButton("📢 اضافه کردن خبر 📢"),
        types.KeyboardButton("📝 مدیریت ورزش 📝"),
        types.KeyboardButton("📞 مدیریت خدمات 📞"),
        types.KeyboardButton("🎉 مدیریت مسابقات 🎉"),
        types.KeyboardButton("🗳 ایجاد نظرسنجی 🗳"),
        types.KeyboardButton("🏪 مدیریت مکان‌ها 🏪"),
        types.KeyboardButton("👥 کاربران فعال 👥"),
        types.KeyboardButton("⬅️ خروج از پنل ادمین ⬅️")
    ]
    keyboard.add(*items)
    return keyboard

def get_back_to_admin_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add("⬅️ بازگشت به پنل مدیریت")
    return keyboard

def get_back_to_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    keyboard.add("⬅️ بازگشت به منو اصلی")
    return keyboard

def get_ad_main_categories_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    for main_cat in AD_CATEGORIES.keys():
        keyboard.add(main_cat)
    keyboard.add("⬅️ بازگشت به دیوار گویم")
    return keyboard

def get_ad_sub_categories_keyboard(main_category):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    for sub_cat in AD_CATEGORIES[main_category]:
        keyboard.add(sub_cat)
    keyboard.add("⬅️ بازگشت به دسته‌های اصلی")
    return keyboard

def get_shop_main_categories_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    for main_cat in SHOP_CATEGORIES.keys():
        keyboard.add(main_cat)
    keyboard.add("⬅️ بازگشت به مغازه ها")
    return keyboard

def get_shop_sub_categories_keyboard(main_category):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    for sub_cat in SHOP_CATEGORIES[main_category]:
        keyboard.add(sub_cat)
    keyboard.add("⬅️ بازگشت به دسته‌های اصلی")
    return keyboard

def get_profile_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add("✏️ ویرایش پروفایل ✏️", "⭐ گویمی‌های برتر ⭐")
    keyboard.add("⬅️ بازگشت به منو اصلی")
    return keyboard

def get_edit_profile_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add("✏️ تغییر اسم", "✏️ تغییر سن")
    keyboard.add("✏️ تغییر جنسیت", "⬅️ بازگشت به پروفایل")
    return keyboard

def get_gender_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add("👦 پسر", "👧 دختر")
    return keyboard

def get_ads_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add("🔍 مشاهده آگهی‌ها", "➕ افزودن آگهی")
    keyboard.add("📄 آگهی‌های من", "⬅️ بازگشت به منو اصلی")
    return keyboard

def get_shops_management_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add("🔍 مشاهده مغازه‌ها", "➕ افزودن مغازه")
    keyboard.add("📄 مغازه‌های من", "⬅️ بازگشت به منو اصلی")
    return keyboard

def get_jokes_keyboard():
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add("📜 لیست طنزها", "➕ افزودن طنز")
    keyboard.add("📄 طنزهای من", "⬅️ بازگشت به منو اصلی")
    return keyboard

# توابع کمکی
def get_user_data(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone()

def set_user_state(user_id, state, data=None):
    cursor.execute("INSERT OR REPLACE INTO user_states (user_id, state, data) VALUES (?, ?, ?)",
                   (user_id, state, json.dumps(data) if data else None))
    conn.commit()

def get_user_state(user_id):
    cursor.execute("SELECT state, data FROM user_states WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        state, data = result
        return state, json.loads(data) if data else None
    return None, None

def update_user_points(user_id, points_to_add=1):
    cursor.execute("UPDATE users SET points = points + ? WHERE user_id = ?", (points_to_add, user_id))
    conn.commit()

def give_daily_bonus(user_id):
    today = datetime.date.today()
    cursor.execute("SELECT last_active FROM users WHERE user_id = ?", (user_id,))
    last_active = cursor.fetchone()
    if not last_active or not last_active[0] or last_active[0] != str(today):
        update_user_points(user_id, 5)
        cursor.execute("UPDATE users SET last_active = ? WHERE user_id = ?", (str(today), user_id))
        conn.commit()

def notify_all_users(section):
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    message_text = f"📢 به بخش '{section}' موضوع جدیدی اضافه شد. برای بررسی بر روی دکمه بخش کلیک کنید."
    for user in users:
        try:
            bot.send_message(user[0], message_text, reply_markup=get_main_keyboard())
        except:
            pass

# هندلرهای اصلی
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        bot.send_message(user_id, "👋 سلام! شما قبلاً ثبت‌نام کرده‌اید.", reply_markup=get_main_keyboard())
        give_daily_bonus(user_id)
    else:
        set_user_state(user_id, 'awaiting_username')
        bot.send_message(user_id, "🌟 خوش آمدید به ربات 'مگا گویم'!\n\nلطفاً اسم مستعار خود را وارد کنید:", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=['admin'])
def send_admin_panel(message):
    user_id = message.from_user.id
    if user_id == ADMIN_ID:
        bot.send_message(user_id, "👨‍💼 به پنل مدیریت خوش آمدید.", reply_markup=get_admin_keyboard())
    else:
        bot.send_message(user_id, "⛔ شما دسترسی به این بخش ندارید.")

@bot.message_handler(func=lambda message: message.text == "⬅️ خروج از پنل ادمین" and message.from_user.id == ADMIN_ID)
def return_to_main_menu(message):
    bot.send_message(message.from_user.id, "🏠 به منوی اصلی بازگشتید.", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "⬅️ بازگشت به پنل مدیریت" and message.from_user.id == ADMIN_ID)
def return_to_admin_panel(message):
    bot.send_message(message.from_user.id, "👨‍💼 به پنل مدیریت بازگشتید.", reply_markup=get_admin_keyboard())

# هندلرهای ثبت نام
@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_username')
def get_username(message):
    user_id = message.from_user.id
    username = message.text.strip()
    if not username:
        bot.send_message(user_id, "⚠️ لطفاً نام معتبر وارد کنید:")
        return
    set_user_state(user_id, 'awaiting_age', {'reg_username': username})
    bot.send_message(user_id, "لطفاً سن خود را وارد کنید (13-70):", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_age')
def get_age(message):
    user_id = message.from_user.id
    try:
        age = int(message.text)
        if 13 <= age <= 70:
            state, data = get_user_state(user_id)
            data['reg_age'] = age
            set_user_state(user_id, 'awaiting_gender', data)
            keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
            keyboard.add("👦 پسر", "👧 دختر")
            bot.send_message(user_id, "لطفاً جنسیت خود را انتخاب کنید:", reply_markup=keyboard)
        else:
            bot.send_message(user_id, "⚠️ سن باید بین 13 تا 70 باشد:")
    except ValueError:
        bot.send_message(user_id, "⚠️ لطفاً عدد وارد کنید:")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_gender')
def get_gender(message):
    user_id = message.from_user.id
    gender = message.text
    if gender in ["👦 پسر", "👧 دختر"]:
        state, data = get_user_state(user_id)
        username = data['reg_username']
        age = data['reg_age']
        gender_text = "پسر" if "پسر" in gender else "دختر"
        rand_id = random.randint(100000, 999999)
        cursor.execute("INSERT INTO users (user_id, username, age, gender, random_id, last_active) VALUES (?, ?, ?, ?, ?, ?)",
                       (user_id, username, age, gender_text, rand_id, str(datetime.date.today())))
        conn.commit()
        cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(user_id, "✅ ثبت‌نام با موفقیت انجام شد!", reply_markup=get_main_keyboard())
        update_user_points(user_id, 5)
    else:
        bot.send_message(user_id, "⚠️ لطفاً 'پسر' یا 'دختر' را انتخاب کنید:", reply_markup=get_gender_keyboard())

# هندلرهای منوی اصلی
@bot.message_handler(func=lambda message: message.text in [
    "📢 اخبار گویم 📢", "🌦 تاریخ و ساعت 🌦", "🛍 دیوار گویم 🛍", "🎉 سرگرمی و مسابقه 🎉",
    "😂 طنز و خاطرات 😂", "⚽ ورزش و رویدادها ⚽", "🗳 نظرسنجی 🗳", "📞 خدمات و شماره‌های مهم 📞",
    "📝 پروفایل من 📝", "🏪 مغازه ها 🏪"
])
def handle_main_menu(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if not user_data:
        send_welcome(message)
        return
    give_daily_bonus(user_id)

    if message.text == "📢 اخبار گویم 📢":
        show_admin_content(user_id, "اخبار")
    elif message.text == "🌦 تاریخ و ساعت 🌦":
        today = jdatetime.date.today()
        bot.send_message(user_id, f"📅 امروز: {today.strftime('%A %d %B %Y')}", reply_markup=get_main_keyboard())
    elif message.text == "🛍 دیوار گویم 🛍":
        handle_divar(message)
    elif message.text == "🎉 سرگرمی و مسابقه 🎉":
        bot.send_message(user_id, "🎯 این بخش در حال توسعه است.", reply_markup=get_main_keyboard())
    elif message.text == "😂 طنز و خاطرات 😂":
        handle_jokes(message)
    elif message.text == "⚽ ورزش و رویدادها ⚽":
        show_admin_content(user_id, "ورزش")
    elif message.text == "🗳 نظرسنجی 🗳":
        bot.send_message(user_id, "📊 این بخش در حال توسعه است.", reply_markup=get_main_keyboard())
    elif message.text == "📞 خدمات و شماره‌های مهم 📞":
        show_admin_content(user_id, "خدمات")
    elif message.text == "📝 پروفایل من 📝":
        show_profile(message)
    elif message.text == "🏪 مغازه ها 🏪":
        handle_shops(message)

# مدیریت محتوای ادمین
def show_admin_content(chat_id, section):
    cursor.execute("SELECT content FROM admin_content WHERE section = ?", (section,))
    content = cursor.fetchone()
    if content:
        bot.send_message(chat_id, content[0], parse_mode='Markdown')
    else:
        bot.send_message(chat_id, f"ℹ️ محتوایی برای '{section}' وجود ندارد.")

@bot.message_handler(func=lambda message: message.text == "📢 اضافه کردن خبر 📢" and message.from_user.id == ADMIN_ID)
def add_news_start(message):
    set_user_state(ADMIN_ID, 'awaiting_news_content')
    bot.send_message(ADMIN_ID, "📝 لطفاً متن خبر جدید را وارد کنید:", reply_markup=get_back_to_admin_keyboard())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_news_content' and message.from_user.id == ADMIN_ID)
def save_news_content(message):
    user_id = message.from_user.id
    news_content = message.text
    cursor.execute("INSERT OR REPLACE INTO admin_content (section, content) VALUES (?, ?)", ("اخبار", news_content))
    conn.commit()
    cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
    conn.commit()
    
    # ارسال خبر به همه کاربران
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    for user in users:
        try:
            bot.send_message(user[0], f"📢 خبر جدید:\n\n{news_content}", parse_mode='Markdown')
        except:
            pass
    
    bot.send_message(ADMIN_ID, "✅ خبر با موفقیت ارسال شد.", reply_markup=get_admin_keyboard())

# مدیریت کاربران توسط ادمین
@bot.message_handler(func=lambda message: message.text == "👥 کاربران فعال 👥" and message.from_user.id == ADMIN_ID)
def show_active_users(message):
    cursor.execute("SELECT COUNT(*) FROM users")
    total = cursor.fetchone()[0]
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    keyboard.add("👦 پسرها", "👧 دخترها")
    keyboard.add("⬅️ بازگشت به پنل مدیریت")
    bot.send_message(message.from_user.id, f"👥 تعداد کاربران: {total}", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text in ["👦 پسرها", "👧 دخترها"] and message.from_user.id == ADMIN_ID)
def list_users_by_gender(message):
    gender = "پسر" if "پسر" in message.text else "دختر"
    cursor.execute("SELECT username, age, points, random_id FROM users WHERE gender = ?", (gender,))
    users = cursor.fetchall()
    if users:
        response = f"👥 کاربران {gender}:\n\n"
        for user in users:
            response += f"👤 نام: {user[0]}\n🎂 سن: {user[1]}\n⭐ امتیاز: {user[2]}\n🔢 شناسه: {user[3]}\n────────────\n"
    else:
        response = f"ℹ️ کاربری با جنسیت {gender} یافت نشد."
    bot.send_message(message.from_user.id, response, reply_markup=get_admin_keyboard())

# بخش آگهی‌ها (دیوار گویم)
def handle_divar(message):
    bot.send_message(message.chat.id, "🛍 به دیوار گویم خوش آمدید.", reply_markup=get_ads_management_keyboard())

@bot.message_handler(func=lambda message: message.text == "🔍 مشاهده آگهی‌ها")
def show_ad_main_categories(message):
    bot.send_message(message.chat.id, "📂 دسته‌بندی اصلی را انتخاب کنید:", reply_markup=get_ad_main_categories_keyboard())
    set_user_state(message.from_user.id, 'awaiting_ad_main_cat_view')

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_ad_main_cat_view' and message.text in AD_CATEGORIES)
def show_ad_sub_categories_view(message):
    main_cat = message.text
    bot.send_message(message.chat.id, f"📁 دسته‌بندی '{main_cat}' انتخاب شد.\nزیر دسته را انتخاب کنید:", reply_markup=get_ad_sub_categories_keyboard(main_cat))
    set_user_state(message.from_user.id, f'awaiting_ad_sub_cat_view_{main_cat}')

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] and get_user_state(message.from_user.id)[0].startswith('awaiting_ad_sub_cat_view_'))
def show_ads_in_sub_cat(message):
    user_id = message.from_user.id
    state, _ = get_user_state(user_id)
    main_cat = state.split('_')[-1]
    sub_cat = message.text
    
    if sub_cat == "⬅️ بازگشت به دسته‌های اصلی":
        show_ad_main_categories(message)
        return
    
    cursor.execute("SELECT id, title FROM ads WHERE category_main = ? AND category_sub = ?", (main_cat, sub_cat))
    ads = cursor.fetchall()
    
    if ads:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        for ad in ads:
            keyboard.add(ad[1])
        keyboard.add("⬅️ بازگشت به زیر دسته‌ها")
        set_user_state(user_id, f'awaiting_ad_selection_{main_cat}_{sub_cat}')
        bot.send_message(user_id, "📋 آگهی را انتخاب کنید:", reply_markup=keyboard)
    else:
        bot.send_message(user_id, "ℹ️ هیچ آگهی‌ای یافت نشد.", reply_markup=get_ads_management_keyboard())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] and get_user_state(message.from_user.id)[0].startswith('awaiting_ad_selection_'))
def show_selected_ad(message):
    user_id = message.from_user.id
    state, _ = get_user_state(user_id)
    parts = state.split('_')
    main_cat = parts[3]
    sub_cat = parts[4]
    title = message.text
    
    if title == "⬅️ بازگشت به زیر دسته‌ها":
        show_ad_sub_categories_view(message)
        return
    
    cursor.execute("SELECT * FROM ads WHERE title = ? AND category_main = ? AND category_sub = ?", (title, main_cat, sub_cat))
    ad = cursor.fetchone()
    
    if ad:
        ad_id, user_id_owner, title, description, price, address, category_main, category_sub, photo_id, contact, created_at = ad
        response = f"🏷️ عنوان: {title}\n📝 توضیحات: {description}\n💰 قیمت: {price}\n📍 آدرس: {address}\n📞 تماس: {contact}\n📂 دسته: {category_main} - {category_sub}"
        
        if photo_id:
            bot.send_photo(message.chat.id, photo_id, caption=response)
        else:
            bot.send_message(message.chat.id, response)
        
        if user_id == user_id_owner:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("✏️ ویرایش", callback_data=f"edit_ad_{ad_id}"))
            keyboard.add(types.InlineKeyboardButton("🗑️ حذف", callback_data=f"delete_ad_{ad_id}"))
            bot.send_message(message.chat.id, "⚙️ گزینه‌های مدیریت آگهی:", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "ℹ️ آگهی یافت نشد.")
    
    cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
    conn.commit()

@bot.message_handler(func=lambda message: message.text == "➕ افزودن آگهی")
def add_ad_main_categories(message):
    bot.send_message(message.chat.id, "📂 دسته‌بندی اصلی را انتخاب کنید:", reply_markup=get_ad_main_categories_keyboard())
    set_user_state(message.from_user.id, 'awaiting_ad_main_cat_add')

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_ad_main_cat_add' and message.text in AD_CATEGORIES)
def add_ad_sub_categories(message):
    main_cat = message.text
    bot.send_message(message.chat.id, f"📁 دسته‌بندی '{main_cat}' انتخاب شد.\nزیر دسته را انتخاب کنید:", reply_markup=get_ad_sub_categories_keyboard(main_cat))
    set_user_state(message.from_user.id, f'awaiting_ad_sub_cat_add_{main_cat}')

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] and get_user_state(message.from_user.id)[0].startswith('awaiting_ad_sub_cat_add_'))
def get_ad_title_add(message):
    user_id = message.from_user.id
    state, _ = get_user_state(user_id)
    main_cat = state.split('_')[-1]
    sub_cat = message.text
    
    if sub_cat == "⬅️ بازگشت به دسته‌های اصلی":
        add_ad_main_categories(message)
        return
    
    set_user_state(user_id, 'awaiting_ad_title', {'category_main': main_cat, 'category_sub': sub_cat})
    bot.send_message(user_id, "🏷️ عنوان آگهی را وارد کنید:", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_ad_title')
def get_ad_description(message):
    user_id = message.from_user.id
    state, data = get_user_state(user_id)
    data['title'] = message.text.strip()
    if not data['title']:
        bot.send_message(user_id, "⚠️ عنوان معتبر وارد کنید:")
        return
    set_user_state(user_id, 'awaiting_ad_description', data)
    bot.send_message(user_id, "📝 توضیحات آگهی را وارد کنید:")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_ad_description')
def get_ad_price(message):
    user_id = message.from_user.id
    state, data = get_user_state(user_id)
    data['description'] = message.text.strip()
    if not data['description']:
        bot.send_message(user_id, "⚠️ توضیحات معتبر وارد کنید:")
        return
    set_user_state(user_id, 'awaiting_ad_price', data)
    bot.send_message(user_id, "💰 قیمت را وارد کنید (در صورت تمایل):")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_ad_price')
def get_ad_address(message):
    user_id = message.from_user.id
    state, data = get_user_state(user_id)
    data['price'] = message.text.strip()
    set_user_state(user_id, 'awaiting_ad_address', data)
    bot.send_message(user_id, "📍 آدرس را وارد کنید (در صورت تمایل):")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_ad_address')
def get_ad_contact(message):
    user_id = message.from_user.id
    state, data = get_user_state(user_id)
    data['address'] = message.text.strip()
    set_user_state(user_id, 'awaiting_ad_contact', data)
    bot.send_message(user_id, "📞 شماره تماس یا آیدی تلگرام را وارد کنید (الزامی):")

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_ad_contact')
def get_ad_photo(message):
    user_id = message.from_user.id
    state, data = get_user_state(user_id)
    contact = message.text.strip()
    if not contact:
        bot.send_message(user_id, "⚠️ اطلاعات تماس معتبر وارد کنید:")
        return
    
    if contact.startswith("09") and len(contact) == 11 and contact.isdigit():
        data['contact'] = contact
    else:
        bot.send_message(user_id, "⚠️ شماره تماس باید ۱۱ رقم و با 09 شروع شود.")
        return
    
    set_user_state(user_id, 'awaiting_ad_photo', data)
    bot.send_message(user_id, "📸 عکس آگهی را ارسال کنید (الزامی):")

@bot.message_handler(content_types=['photo'], func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_ad_photo')
def process_ad_photo(message):
    user_id = message.from_user.id
    state, data = get_user_state(user_id)
    photo_id = message.photo[-1].file_id
    data['photo_id'] = photo_id
    
    cursor.execute("INSERT INTO ads (user_id, title, description, price, address, category_main, category_sub, photo_id, contact) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
                   (user_id, data['title'], data['description'], data.get('price', ''), data.get('address', ''), data['category_main'], data['category_sub'], photo_id, data['contact']))
    conn.commit()
    cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
    conn.commit()
    update_user_points(user_id, 10)
    bot.send_message(user_id, "✅ آگهی ثبت شد و 10 امتیاز گرفتید!", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "📄 آگهی‌های من")
def show_my_ads(message):
    user_id = message.from_user.id
    cursor.execute("SELECT id, title, category_main, category_sub FROM ads WHERE user_id = ?", (user_id,))
    my_ads = cursor.fetchall()
    
    if my_ads:
        for ad in my_ads:
            ad_id, title, main_cat, sub_cat = ad
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("✏️ ویرایش", callback_data=f"edit_ad_{ad_id}"))
            keyboard.add(types.InlineKeyboardButton("🗑️ حذف", callback_data=f"delete_ad_{ad_id}"))
            bot.send_message(user_id, f"🏷️ عنوان: {title}\n📂 دسته: {main_cat} - {sub_cat}", reply_markup=keyboard)
    else:
        bot.send_message(user_id, "ℹ️ شما آگهی ثبت نکرده‌اید.", reply_markup=get_main_keyboard())

# بخش مغازه‌ها
def handle_shops(message):
    bot.send_message(message.chat.id, "🏪 به بخش مغازه ها خوش آمدید.", reply_markup=get_shops_management_keyboard())

@bot.message_handler(func=lambda message: message.text == "🔍 مشاهده مغازه‌ها")
def show_shop_main_categories(message):
    bot.send_message(message.chat.id, "📂 دسته‌بندی اصلی را انتخاب کنید:", reply_markup=get_shop_main_categories_keyboard())
    set_user_state(message.from_user.id, 'awaiting_shop_main_cat_view')

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_shop_main_cat_view' and message.text in SHOP_CATEGORIES)
def show_shop_sub_categories_view(message):
    main_cat = message.text
    bot.send_message(message.chat.id, f"📁 دسته‌بندی '{main_cat}' انتخاب شد.\nزیر دسته را انتخاب کنید:", reply_markup=get_shop_sub_categories_keyboard(main_cat))
    set_user_state(message.from_user.id, f'awaiting_shop_sub_cat_view_{main_cat}')

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] and get_user_state(message.from_user.id)[0].startswith('awaiting_shop_sub_cat_view_'))
def show_shops_in_sub_cat(message):
    user_id = message.from_user.id
    state, _ = get_user_state(user_id)
    main_cat = state.split('_')[-1]
    sub_cat = message.text
    
    if sub_cat == "⬅️ بازگشت به دسته‌های اصلی":
        show_shop_main_categories(message)
        return
    
    cursor.execute("SELECT id, title FROM shops WHERE category_main = ? AND category_sub = ?", (main_cat, sub_cat))
    shops = cursor.fetchall()
    
    if shops:
        keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        for shop in shops:
            keyboard.add(shop[1])
        keyboard.add("⬅️ بازگشت به زیر دسته‌ها")
        set_user_state(user_id, f'awaiting_shop_selection_{main_cat}_{sub_cat}')
        bot.send_message(user_id, "📋 مغازه را انتخاب کنید:", reply_markup=keyboard)
    else:
        bot.send_message(user_id, "ℹ️ هیچ مغازه‌ای یافت نشد.", reply_markup=get_shops_management_keyboard())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] and get_user_state(message.from_user.id)[0].startswith('awaiting_shop_selection_'))
def show_selected_shop(message):
    user_id = message.from_user.id
    state, _ = get_user_state(user_id)
    parts = state.split('_')
    main_cat = parts[3]
    sub_cat = parts[4]
    title = message.text
    
    if title == "⬅️ بازگشت به زیر دسته‌ها":
        show_shop_sub_categories_view(message)
        return
    
    cursor.execute("SELECT * FROM shops WHERE title = ? AND category_main = ? AND category_sub = ?", (title, main_cat, sub_cat))
    shop = cursor.fetchone()
    
    if shop:
        (shop_id, title, description, address, category_main, category_sub, 
         photo_id, contact, admin_id, owner_id, seller_username, seller_age, seller_gender, created_at) = shop
        
        # محاسبه میانگین امتیازها
        cursor.execute("SELECT AVG(rating) FROM shop_ratings WHERE shop_id = ?", (shop_id,))
        avg_rating = cursor.fetchone()[0] or 0
        
        response = (f"🏪 عنوان: {title}\n"
                   f"📝 توضیحات: {description}\n"
                   f"📍 آدرس: {address}\n"
                   f"📞 تماس: {contact}\n"
                   f"👤 فروشنده: {seller_username} (سن: {seller_age}, جنسیت: {seller_gender})\n"
                   f"📂 دسته: {category_main} - {category_sub}\n"
                   f"⭐ امتیاز: {avg_rating:.1f}/10")
        
        if photo_id:
            bot.send_photo(message.chat.id, photo_id, caption=response)
        else:
            bot.send_message(message.chat.id, response)
        
        # دکمه امتیازدهی
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("⭐ امتیاز دادن", callback_data=f"rate_shop_{shop_id}"))
        bot.send_message(message.chat.id, "⚙️ گزینه‌ها:", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "ℹ️ مغازه یافت نشد.")
    
    cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
    conn.commit()

@bot.message_handler(func=lambda message: message.text == "➕ افزودن مغازه")
def check_add_shop_permission(message):
    if message.from_user.id == ADMIN_ID:
        bot.send_message(message.from_user.id, "📂 دسته‌بندی اصلی را انتخاب کنید:", reply_markup=get_shop_main_categories_keyboard())
        set_user_state(message.from_user.id, 'awaiting_shop_main_cat_add')
    else:
        bot.send_message(message.from_user.id, "ℹ️ برای ثبت مغازه با ادمین هماهنگ کنید: @Sedayegoyom10", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_shop_main_cat_add' and message.text in SHOP_CATEGORIES)
def add_shop_sub_categories(message):
    main_cat = message.text
    bot.send_message(message.chat.id, f"📁 دسته‌بندی '{main_cat}' انتخاب شد.\nزیر دسته را انتخاب کنید:", reply_markup=get_shop_sub_categories_keyboard(main_cat))
    set_user_state(message.from_user.id, f'awaiting_shop_sub_cat_add_{main_cat}')

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] and get_user_state(message.from_user.id)[0].startswith('awaiting_shop_sub_cat_add_'))
def get_shop_title_add(message):
    user_id = message.from_user.id
    state, _ = get_user_state(user_id)
    main_cat = state.split('_')[-1]
    sub_cat = message.text
    
    if sub_cat == "⬅️ بازگشت به دسته‌های اصلی":
        check_add_shop_permission(message)
        return
    
    set_user_state(user_id, 'awaiting_shop_title', {'category_main': main_cat, 'category_sub': sub_cat})
    bot.send_message(user_id, "🏷️ عنوان مغازه را وارد کنید:", reply_markup=get_back_to_admin_keyboard())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_shop_title' and message.from_user.id == ADMIN_ID)
def get_shop_description(message):
    user_id = message.from_user.id
    state, data = get_user_state(user_id)
    data['title'] = message.text.strip()
    if not data['title']:
        bot.send_message(user_id, "⚠️ عنوان معتبر وارد کنید:")
        return
    set_user_state(user_id, 'awaiting_shop_description', data)
    bot.send_message(user_id, "📝 توضیحات مغازه را وارد کنید:", reply_markup=get_back_to_admin_keyboard())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_shop_description' and message.from_user.id == ADMIN_ID)
def get_shop_address(message):
    user_id = message.from_user.id
    state, data = get_user_state(user_id)
    data['description'] = message.text.strip()
    if not data['description']:
        bot.send_message(user_id, "⚠️ توضیحات معتبر وارد کنید:")
        return
    set_user_state(user_id, 'awaiting_shop_address', data)
    bot.send_message(user_id, "📍 آدرس مغازه را وارد کنید:", reply_markup=get_back_to_admin_keyboard())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_shop_address' and message.from_user.id == ADMIN_ID)
def get_shop_contact(message):
    user_id = message.from_user.id
    state, data = get_user_state(user_id)
    data['address'] = message.text.strip()
    if not data['address']:
        bot.send_message(user_id, "⚠️ آدرس معتبر وارد کنید:")
        return
    set_user_state(user_id, 'awaiting_shop_contact', data)
    bot.send_message(user_id, "📞 شماره تماس مغازه را وارد کنید:", reply_markup=get_back_to_admin_keyboard())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_shop_contact' and message.from_user.id == ADMIN_ID)
def get_shop_owner_id(message):
    user_id = message.from_user.id
    contact = message.text.strip()
    if not contact:
        bot.send_message(user_id, "⚠️ اطلاعات تماس معتبر وارد کنید:")
        return
    
    if not (contact.startswith("09") and len(contact) == 11 and contact.isdigit()):
        bot.send_message(user_id, "⚠️ شماره تماس باید ۱۱ رقم و با 09 شروع شود.")
        return
    
    state, data = get_user_state(user_id)
    data['contact'] = contact
    set_user_state(user_id, 'awaiting_shop_owner_id', data)
    bot.send_message(user_id, "🔢 شناسه عددی صاحب مغازه را وارد کنید:", reply_markup=get_back_to_admin_keyboard())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_shop_owner_id' and message.from_user.id == ADMIN_ID)
def get_seller_username(message):
    user_id = message.from_user.id
    try:
        owner_id = int(message.text.strip())
        cursor.execute("SELECT username, age, gender FROM users WHERE random_id = ?", (owner_id,))
        owner_data = cursor.fetchone()
        
        if not owner_data:
            bot.send_message(user_id, "⚠️ کاربری با این شناسه یافت نشد.")
            return
        
        state, data = get_user_state(user_id)
        data['owner_id'] = owner_id
        data['seller_username'] = owner_data[0]
        data['seller_age'] = owner_data[1]
        data['seller_gender'] = owner_data[2]
        data['admin_id'] = user_id
        
        set_user_state(user_id, 'awaiting_shop_photo', data)
        bot.send_message(user_id, "📸 عکس مغازه را ارسال کنید (الزامی):", reply_markup=get_back_to_admin_keyboard())
    except:
        bot.send_message(user_id, "⚠️ شناسه نامعتبر است.")

@bot.message_handler(content_types=['photo'], func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_shop_photo' and message.from_user.id == ADMIN_ID)
def process_shop_photo(message):
    user_id = message.from_user.id
    state, data = get_user_state(user_id)
    photo_id = message.photo[-1].file_id
    
    cursor.execute("""INSERT INTO shops (title, description, address, category_main, category_sub, 
                   photo_id, contact, admin_id, owner_id, seller_username, seller_age, seller_gender) 
                   VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                   (data['title'], data['description'], data['address'], data['category_main'], 
                    data['category_sub'], photo_id, data['contact'], data['admin_id'], data['owner_id'],
                    data['seller_username'], data['seller_age'], data['seller_gender']))
    conn.commit()
    cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
    conn.commit()
    bot.send_message(user_id, "✅ مغازه ثبت شد.", reply_markup=get_admin_keyboard())

@bot.message_handler(func=lambda message: message.text == "📄 مغازه‌های من")
def show_my_shops(message):
    user_id = message.from_user.id
    cursor.execute("SELECT id, title, category_main, category_sub FROM shops WHERE owner_id = (SELECT random_id FROM users WHERE user_id = ?)", (user_id,))
    my_shops = cursor.fetchall()
    
    if my_shops:
        for shop in my_shops:
            shop_id, title, main_cat, sub_cat = shop
            bot.send_message(user_id, f"🏪 عنوان: {title}\n📂 دسته: {main_cat} - {sub_cat}")
    else:
        bot.send_message(user_id, "ℹ️ شما مغازه‌ای ثبت نکرده‌اید.", reply_markup=get_main_keyboard())

# بخش پروفایل
def show_profile(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        _, username, age, gender, points, rand_id, _ = user_data
        response = (f"👤 پروفایل:\n"
                   f"🏷️ نام: {username}\n"
                   f"🔢 شناسه: {rand_id}\n"
                   f"🎂 سن: {convert_fa_numbers(str(age))}\n"
                   f"👫 جنسیت: {gender}\n"
                   f"⭐ امتیاز: {points}")
        bot.send_message(user_id, response, reply_markup=get_profile_keyboard())

@bot.message_handler(func=lambda message: message.text == "✏️ ویرایش پروفایل ✏️")
def edit_profile_menu(message):
    bot.send_message(message.chat.id, "⚙️ چه چیزی را ویرایش کنید؟", reply_markup=get_edit_profile_keyboard())

@bot.message_handler(func=lambda message: message.text == "✏️ تغییر اسم")
def change_username_start(message):
    set_user_state(message.from_user.id, 'awaiting_new_username')
    bot.send_message(message.chat.id, "✏️ اسم مستعار جدید را وارد کنید:", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_new_username')
def change_username_process(message):
    user_id = message.from_user.id
    new_username = message.text.strip()
    if not new_username:
        bot.send_message(user_id, "⚠️ نام معتبر وارد کنید:")
        return
    cursor.execute("UPDATE users SET username = ? WHERE user_id = ?", (new_username, user_id))
    conn.commit()
    cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
    conn.commit()
    bot.send_message(user_id, f"✅ نام شما به {new_username} تغییر یافت.", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "✏️ تغییر سن")
def change_age_start(message):
    set_user_state(message.from_user.id, 'awaiting_new_age')
    keyboard = types.ReplyKeyboardMarkup(row_width=10, resize_keyboard=True)
    ages = [str(i) for i in range(13, 71)]
    keyboard.add(*ages)
    bot.send_message(message.chat.id, "🎂 سن جدید را انتخاب کنید:", reply_markup=keyboard)

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_new_age')
def change_age_process(message):
    user_id = message.from_user.id
    try:
        new_age = int(message.text)
        if 13 <= new_age <= 70:
            cursor.execute("UPDATE users SET age = ? WHERE user_id = ?", (new_age, user_id))
            conn.commit()
            cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
            conn.commit()
            bot.send_message(user_id, f"✅ سن شما به {convert_fa_numbers(str(new_age))} تغییر یافت.", reply_markup=get_main_keyboard())
        else:
            bot.send_message(user_id, "⚠️ سن باید بین 13 تا 70 باشد:")
    except ValueError:
        bot.send_message(user_id, "⚠️ لطفاً عدد وارد کنید:")

@bot.message_handler(func=lambda message: message.text == "✏️ تغییر جنسیت")
def change_gender_start(message):
    set_user_state(message.from_user.id, 'awaiting_new_gender')
    bot.send_message(message.chat.id, "👫 جنسیت جدید را انتخاب کنید:", reply_markup=get_gender_keyboard())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_new_gender')
def change_gender_process(message):
    user_id = message.from_user.id
    new_gender = message.text
    if new_gender in ["👦 پسر", "👧 دختر"]:
        gender_text = "پسر" if "پسر" in new_gender else "دختر"
        cursor.execute("UPDATE users SET gender = ? WHERE user_id = ?", (gender_text, user_id))
        conn.commit()
        cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
        conn.commit()
        bot.send_message(user_id, f"✅ جنسیت شما به {gender_text} تغییر یافت.", reply_markup=get_main_keyboard())
    else:
        bot.send_message(user_id, "⚠️ لطفاً 'پسر' یا 'دختر' را انتخاب کنید:", reply_markup=get_gender_keyboard())

@bot.message_handler(func=lambda message: message.text == "⭐ گویمی‌های برتر ⭐")
def show_top_users(message):
    cursor.execute("SELECT username, age, gender, points FROM users WHERE points > 1000 ORDER BY points DESC LIMIT 10")
    top_users = cursor.fetchall()
    if top_users:
        response = "🏆 گویمی‌های برتر:\n\n"
        for i, user in enumerate(top_users, 1):
            response += f"{i}. 👤 {user[0]} - 🎂 {user[1]} - 👫 {user[2]} - ⭐ {user[3]}\n"
    else:
        response = "ℹ️ کاربری با امتیاز بالای 1000 یافت نشد."
    bot.send_message(message.chat.id, response, reply_markup=get_main_keyboard())

# بخش طنز
def handle_jokes(message):
    bot.send_message(message.chat.id, "😂 به بخش طنز و خاطرات خوش آمدید.", reply_markup=get_jokes_keyboard())

@bot.message_handler(func=lambda message: message.text == "📜 لیست طنزها")
def show_all_jokes(message):
    cursor.execute("SELECT id, joke_text FROM jokes LIMIT 10")
    jokes = cursor.fetchall()
    if jokes:
        for joke in jokes:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("📖 نمایش کامل", callback_data=f"show_joke_{joke[0]}"))
            bot.send_message(message.chat.id, joke[1][:100] + "...", reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, "ℹ️ هیچ طنزی یافت نشد.", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "➕ افزودن طنز")
def handle_add_joke(message):
    user_id = message.from_user.id
    set_user_state(user_id, 'awaiting_joke')
    bot.send_message(user_id, "😂 لطفاً متن طنز یا خاطره خود را وارد کنید:", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id)[0] == 'awaiting_joke')
def process_add_joke(message):
    user_id = message.from_user.id
    joke_text = message.text.strip()
    if not joke_text:
        bot.send_message(user_id, "⚠️ متن معتبر وارد کنید:")
        return
    cursor.execute("INSERT INTO jokes (user_id, joke_text) VALUES (?, ?)", (user_id, joke_text))
    conn.commit()
    cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
    conn.commit()
    update_user_points(user_id, 5)
    bot.send_message(user_id, "✅ طنز شما ثبت شد و 5 امتیاز گرفتید!", reply_markup=get_main_keyboard())

@bot.message_handler(func=lambda message: message.text == "📄 طنزهای من")
def show_my_jokes(message):
    user_id = message.from_user.id
    cursor.execute("SELECT id, joke_text FROM jokes WHERE user_id = ?", (user_id,))
    my_jokes = cursor.fetchall()
    if my_jokes:
        for joke in my_jokes:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("✏️ ویرایش", callback_data=f"edit_joke_{joke[0]}"))
            keyboard.add(types.InlineKeyboardButton("🗑️ حذف", callback_data=f"delete_joke_{joke[0]}"))
            bot.send_message(user_id, joke[1], reply_markup=keyboard)
    else:
        bot.send_message(user_id, "ℹ️ شما طنزی ثبت نکرده‌اید.", reply_markup=get_main_keyboard())

# هندلرهای بازگشت
@bot.message_handler(func=lambda message: message.text in ["⬅️ بازگشت به منو اصلی", "⬅️ بازگشت به دیوار گویم", "⬅️ بازگشت به مغازه ها", "⬅️ بازگشت به پروفایل"])
def handle_back_buttons(message):
    user_id = message.from_user.id
    if message.text == "⬅️ بازگشت به منو اصلی":
        bot.send_message(user_id, "🏠 به منوی اصلی بازگشتید.", reply_markup=get_main_keyboard())
    elif message.text == "⬅️ بازگشت به دیوار گویم":
        handle_divar(message)
    elif message.text == "⬅️ بازگشت به مغازه ها":
        handle_shops(message)
    elif message.text == "⬅️ بازگشت به پروفایل":
        show_profile(message)
    
    cursor.execute("DELETE FROM user_states WHERE user_id = ?", (user_id,))
    conn.commit()

# هندلر کلی برای تمام پیام‌ها
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        state, _ = get_user_state(user_id)
        if not state:
            bot.send_message(user_id, "ℹ️ لطفاً از دکمه‌ها استفاده کنید.", reply_markup=get_main_keyboard())
        else:
            bot.send_message(user_id, "ℹ️ لطفاً مراحل قبلی را تکمیل کنید یا به منوی اصلی بازگردید.")
    else:
        send_welcome(message)

# Webhook setup
if WEBHOOK_URL:
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)

@app.route(f'/{API_TOKEN}', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return 'OK', 200
    else:
        return 'Invalid Content-Type', 403

@app.route('/')
def index():
    return 'Goyom Bot is running!'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 5000)))